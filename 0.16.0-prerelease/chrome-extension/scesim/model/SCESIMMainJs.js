SCESIMMainJs={mappings:[SCESIM],initializeJsInteropConstructors:function(n){function e(n){return new Function('return { "TYPE_NAME" : "'+n+'" }')}function o(){return new Function("return { }")}function r(n){console.log("Create createConstructor "+n);const r=JSON.parse(n),t=r.name,a=r.nameSpace,l=r.typeName;console.log("parsedJson "+r),console.log("name "+t),console.log("nameSpace "+a),console.log("typeName "+l),null!=a?window[a][t]=null!=l?e(l):o():window[t]=null!=l?e(l):o()}function t(n){return null!=JSON.parse(n).nameSpace}function a(n){return null==JSON.parse(n).nameSpace}console.log("Generating JsInterop constructors.");for(const e in n)n.hasOwnProperty(e)&&(l=e,s=n[e],console.log("iterateKeyValueEntry "+l+"  "+s),function(n){console.log("iterateValueEntry "+n);const e=n.filter(a),o=n.filter(t);e.forEach(r),o.forEach(r)}(s));var l,s},unmarshall:function(n,e,o){o(new Jsonix.Context(this.mappings).createUnmarshaller().unmarshalString(n))},marshall:function(n,e,o){var r=new Jsonix.Context(this.mappings,{namespacePrefixes:{}}).createMarshaller().marshalDocument(n);o((new XMLSerializer).serializeToString(r))}};